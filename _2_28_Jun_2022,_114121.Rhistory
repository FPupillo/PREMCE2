# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct()
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (nrow(temp_long[temp_long$participant==part,])>1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
# participant
part<-as.numeric(substr(files[j], 1, 2))
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
#Parameters
setTxtProgressBar(pb, j)
}, error = function(e) { print(paste("problem with number", j,
"ERROR:", conditionMessage(e)))})
}
#Param<-foreach (j=1:length(participants),.combine=rbind,.packages='dplyr')  %dopar% {
Param<-foreach (j=1:2,.combine=rbind,.packages='dplyr')  %dopar% {
# for (j in 1: length(participants)){
tryCatch({
# retrieve the file
DataSub<-read.csv(paste0("data_files/", files[j]))
# delete unnecessary columnts
DataSub<-select(DataSub, -columnsDel)
# create trial number
DataSub$trialNum<-1:nrow(DataSub)
# print a message showing on which participant the script is working on
print(paste("Working on participant", j))
# subset the data for the current participant
#DataSub<-DataAll[DataAll$SubNum==participants[j],]
# Delete the first list
# DataSub<-DataSub[DataSub$listN!=0,]
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
# create object category
#DataSub$obj_category<-DataSub$corrCat
# Delete the first list
DataSub<-DataSub[DataSub$switch_cond!=1,]
# delete nas
DataSub<-DataSub[!is.na(DataSub$obj_category),]
DataSub$obj_category<-as.character(DataSub$obj_category)
DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub$response<-DataSub$task_resp.keys
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
#DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub<-getCatresp(DataSub)
for (n in 1:nrow(DataSub)){
DataSub$respCat[n]<-substr(DataSub$respCat[n],9, nchar(DataSub$respCat[n])-4)
}
# estimate alpha and beta, calculate the time
start_time<-Sys.time() # take the starting time
est<-fit_RescorlaWagner_IC(DataSub, alphaBound,betaBound, initialQ)
end_time<-Sys.time() # take the ending time
print(end_time-start_time) # calculate how long it took to estimate the parameters for that participant
# extract alpha and beta from estimation results
alpha<-est$alpha[1]
beta<-est$alpha[2]
# feed the RWM with the alpha and beta obtained to get Qs and PE
par<-lik_RescorlaWagner_IC(DataSub, alpha, beta,2, initialQ)
# now, get PE
#PE<-sum(par$Delta, na.rm=T)
# add the data to a data long dataframe
if (!exists("Datalong")){
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
} else{
Data<-par
Data$entropy_pre<-unlist(Data$entropy_pre)
Data$surprise<-unlist(Data$surprise)
Datalong<-rbind(Datalong,Data)
}
# prepare results for saving
Parameters[j, c(1:5)]<-c(DataSub$participant[1],
alpha, beta, est$BIC, est$logLikel)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct()
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (nrow(temp_long[temp_long$participant==part,])>1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
# participant
part<-as.numeric(substr(files[j], 1, 2))
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
#Parameters
setTxtProgressBar(pb, j)
}, error = function(e) { print(paste("problem with number", j,
"ERROR:", conditionMessage(e)))})
}
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct()
temp
temp %>% distinct()
# delete duplicate
temp<-temp %>% distinct(PartNum)
View(temp)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct(PartNum,.keep_all = TRUE)
View(temp)
#Param<-foreach (j=1:length(participants),.combine=rbind,.packages='dplyr')  %dopar% {
Param<-foreach (j=1:2,.combine=rbind,.packages='dplyr')  %dopar% {
# for (j in 1: length(participants)){
tryCatch({
# retrieve the file
DataSub<-read.csv(paste0("data_files/", files[j]))
# delete unnecessary columnts
DataSub<-select(DataSub, -columnsDel)
# create trial number
DataSub$trialNum<-1:nrow(DataSub)
# print a message showing on which participant the script is working on
print(paste("Working on participant", j))
# subset the data for the current participant
#DataSub<-DataAll[DataAll$SubNum==participants[j],]
# Delete the first list
# DataSub<-DataSub[DataSub$listN!=0,]
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
# create object category
#DataSub$obj_category<-DataSub$corrCat
# Delete the first list
DataSub<-DataSub[DataSub$switch_cond!=1,]
# delete nas
DataSub<-DataSub[!is.na(DataSub$obj_category),]
DataSub$obj_category<-as.character(DataSub$obj_category)
DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub$response<-DataSub$task_resp.keys
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
#DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub<-getCatresp(DataSub)
for (n in 1:nrow(DataSub)){
DataSub$respCat[n]<-substr(DataSub$respCat[n],9, nchar(DataSub$respCat[n])-4)
}
# estimate alpha and beta, calculate the time
start_time<-Sys.time() # take the starting time
est<-fit_RescorlaWagner_IC(DataSub, alphaBound,betaBound, initialQ)
end_time<-Sys.time() # take the ending time
print(end_time-start_time) # calculate how long it took to estimate the parameters for that participant
# extract alpha and beta from estimation results
alpha<-est$alpha[1]
beta<-est$alpha[2]
# feed the RWM with the alpha and beta obtained to get Qs and PE
par<-lik_RescorlaWagner_IC(DataSub, alpha, beta,2, initialQ)
# now, get PE
#PE<-sum(par$Delta, na.rm=T)
# add the data to a data long dataframe
if (!exists("Datalong")){
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
} else{
Data<-par
Data$entropy_pre<-unlist(Data$entropy_pre)
Data$surprise<-unlist(Data$surprise)
Datalong<-rbind(Datalong,Data)
}
# prepare results for saving
Parameters[j, c(1:5)]<-c(DataSub$participant[1],
alpha, beta, est$BIC, est$logLikel)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct(PartNum,.keep_all = TRUE)
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (nrow(temp_long[temp_long$participant==DataSub$participant[1],])>1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
#Parameters
setTxtProgressBar(pb, j)
}, error = function(e) { print(paste("problem with number", j,
"ERROR:", conditionMessage(e)))})
}
end_time<-Sys.time() # take the ending time
print(end_time-start_time) # calculate how long it took to estimate the parameters for that participant
# extract alpha and beta from estimation results
alpha<-est$alpha[1]
beta<-est$alpha[2]
# feed the RWM with the alpha and beta obtained to get Qs and PE
par<-lik_RescorlaWagner_IC(DataSub, alpha, beta,2, initialQ)
# add the data to a data long dataframe
if (!exists("Datalong")){
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
} else{
Data<-par
Data$entropy_pre<-unlist(Data$entropy_pre)
Data$surprise<-unlist(Data$surprise)
Datalong<-rbind(Datalong,Data)
}
# prepare results for saving
Parameters[j, c(1:5)]<-c(DataSub$participant[1],
alpha, beta, est$BIC, est$logLikel)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct(PartNum,.keep_all = TRUE)
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (nrow(temp_long[temp_long$participant==DataSub$participant[1],])>1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
(nrow(temp_long[temp_long$participant==DataSub$participant[1],])>1)
DataSub$participant[1]
nrow(temp_long[temp_long$participant==DataSub$participant[1],])
a<-temp_long[temp_long$participant==DataSub$participant[1],]
View(Datalong)
unique(Datalong$participant)
Datalong$participant
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
(nrow(temp_long[temp_long$participant==DataSub$participant[1],])<1)
# save data from reinforcement learning
write.csv (Datalong, "output_files/RLdata_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
(nrow(temp_long[temp_long$participant==DataSub$participant[1],])<1)
(nrow(temp_long[temp_long$participant==DataSub$participant[1],])
)
(nrow(temp_long[temp_long$participant==51,])
)
(nrow(temp_long[temp_long$participant==51,])<1)
# now the long data
Datalong<-vector()
write.csv(Datalong, "output_files/RLdata_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
(nrow(temp_long[temp_long$participant==51,])<1)
(temp_long[temp_long$participant==51,]
)
temp_long[temp_long$participant==51,]
temp_long[temp_long$participant==51,]==T
temp_long[temp_long$participant==51,]==F
!is.null(temp_long[temp_long$participant==51,])
is.null(temp_long[temp_long$participant==51,])
# now the long data
Datalong<-vector(NA)
# now the long data
Datalong<-vector(numeric())
?vector()
# now the long data
Datalong<-vector(length=1)
View(temp_long)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
# save data from reinforcement learning
write.csv (Datalong, "output_files/RLdata_RW_IC.csv", row.names = F)
names(temp_long)
names(Datalong)
nrow(temp_long[temp_long$participant==51,])<1)
nrow(temp_long[temp_long$participant==51,])<1
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
getwd()
list.files
list.files()
# save data from reinforcement learning
write.csv (Datalong, "output_files/RLdata_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
nrow(temp_long[temp_long$participant==51,])<1)
nrow(temp_long[temp_long$participant==51,])<1
#Param<-foreach (j=1:length(participants),.combine=rbind,.packages='dplyr')  %dopar% {
Param<-foreach (j=1:2,.combine=rbind,.packages='dplyr')  %dopar% {
# for (j in 1: length(participants)){
tryCatch({
# retrieve the file
DataSub<-read.csv(paste0("data_files/", files[j]))
# delete unnecessary columnts
DataSub<-select(DataSub, -columnsDel)
# create trial number
DataSub$trialNum<-1:nrow(DataSub)
# print a message showing on which participant the script is working on
print(paste("Working on participant", j))
# subset the data for the current participant
#DataSub<-DataAll[DataAll$SubNum==participants[j],]
# Delete the first list
# DataSub<-DataSub[DataSub$listN!=0,]
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
# create object category
#DataSub$obj_category<-DataSub$corrCat
# Delete the first list
DataSub<-DataSub[DataSub$switch_cond!=1,]
# delete nas
DataSub<-DataSub[!is.na(DataSub$obj_category),]
DataSub$obj_category<-as.character(DataSub$obj_category)
DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub$response<-DataSub$task_resp.keys
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
#DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub<-getCatresp(DataSub)
for (n in 1:nrow(DataSub)){
DataSub$respCat[n]<-substr(DataSub$respCat[n],9, nchar(DataSub$respCat[n])-4)
}
# estimate alpha and beta, calculate the time
start_time<-Sys.time() # take the starting time
est<-fit_RescorlaWagner_IC(DataSub, alphaBound,betaBound, initialQ)
end_time<-Sys.time() # take the ending time
print(end_time-start_time) # calculate how long it took to estimate the parameters for that participant
# extract alpha and beta from estimation results
alpha<-est$alpha[1]
beta<-est$alpha[2]
# feed the RWM with the alpha and beta obtained to get Qs and PE
par<-lik_RescorlaWagner_IC(DataSub, alpha, beta,2, initialQ)
# now, get PE
#PE<-sum(par$Delta, na.rm=T)
# add the data to a data long dataframe
if (!exists("Datalong")){
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
} else{
Data<-par
Data$entropy_pre<-unlist(Data$entropy_pre)
Data$surprise<-unlist(Data$surprise)
Datalong<-rbind(Datalong,Data)
}
# prepare results for saving
Parameters[j, c(1:5)]<-c(DataSub$participant[1],
alpha, beta, est$BIC, est$logLikel)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct(PartNum,.keep_all = TRUE)
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (j==1  | nrow(temp_long[temp_long$participant==DataSub$participant[j],])<1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
#Parameters
setTxtProgressBar(pb, j)
}, error = function(e) { print(paste("problem with number", j,
"ERROR:", conditionMessage(e)))})
}
Param<-foreach (j=1:2,.combine=rbind,.packages='dplyr')  %dopar% {
debugSource("~/PowerFolders/PREMCE/GitHub/PREMCE/parameter_estimation/Parameter.estimation_RescorlaWagner_IC.R", echo=TRUE)
debugSource("~/PowerFolders/PREMCE/GitHub/PREMCE/parameter_estimation/Parameter.estimation_RescorlaWagner_IC.R", echo=TRUE)
# compute likelihood
rm(list=ls())
library(ggplot2)
library(dplyr)
library(doParallel)
library(foreach)
# source the functions
source("helper_functions/selPart.R")
source("helper_functions/softmax.R")
source("likelihood_functions/lik_RescorlaWagner_IC.R")
source("fitting_functions/fit_RescorlaWagner_IC.R")
getwd()
debugSource("~/PowerFolders/PREMCE/GitHub/PREMCE/parameter_estimation/Parameter.estimation_RescorlaWagner_IC.R", echo=TRUE)
j<-1
# retrieve the file
DataSub<-read.csv(paste0("data_files/", files[j]))
# delete unnecessary columnts
DataSub<-select(DataSub, -columnsDel)
#Param<-foreach (j=1:length(participants),.combine=rbind,.packages='dplyr')  %dopar% {
Param<-foreach (j=1:2,.combine=rbind,.packages='dplyr')  %dopar% {
# for (j in 1: length(participants)){
tryCatch({
# retrieve the file
DataSub<-read.csv(paste0("data_files/", files[j]))
# delete unnecessary columnts
DataSub<-select(DataSub, -columnsDel)
# create trial number
DataSub$trialNum<-1:nrow(DataSub)
# print a message showing on which participant the script is working on
print(paste("Working on participant", j))
# subset the data for the current participant
#DataSub<-DataAll[DataAll$SubNum==participants[j],]
# Delete the first list
# DataSub<-DataSub[DataSub$listN!=0,]
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
# create object category
#DataSub$obj_category<-DataSub$corrCat
# Delete the first list
DataSub<-DataSub[DataSub$switch_cond!=1,]
# delete nas
DataSub<-DataSub[!is.na(DataSub$obj_category),]
DataSub$obj_category<-as.character(DataSub$obj_category)
DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub$response<-DataSub$task_resp.keys
# create cued character
#DataSub$cuedCharacter<-paste0("stimuli/", DataSub$character, ".jpg")
#DataSub$cuedCharacter<-as.character(DataSub$cuedCharacter)
DataSub<-getCatresp(DataSub)
for (n in 1:nrow(DataSub)){
DataSub$respCat[n]<-substr(DataSub$respCat[n],9, nchar(DataSub$respCat[n])-4)
}
# estimate alpha and beta, calculate the time
start_time<-Sys.time() # take the starting time
est<-fit_RescorlaWagner_IC(DataSub, alphaBound,betaBound, initialQ)
end_time<-Sys.time() # take the ending time
print(end_time-start_time) # calculate how long it took to estimate the parameters for that participant
# extract alpha and beta from estimation results
alpha<-est$alpha[1]
beta<-est$alpha[2]
# feed the RWM with the alpha and beta obtained to get Qs and PE
par<-lik_RescorlaWagner_IC(DataSub, alpha, beta,2, initialQ)
# now, get PE
#PE<-sum(par$Delta, na.rm=T)
# add the data to a data long dataframe
if (!exists("Datalong")){
Datalong<-par
Datalong$entropy_pre<-unlist(Datalong$entropy_pre)
Datalong$surprise<-unlist(Datalong$surprise)
} else{
Data<-par
Data$entropy_pre<-unlist(Data$entropy_pre)
Data$surprise<-unlist(Data$surprise)
Datalong<-rbind(Datalong,Data)
}
# prepare results for saving
Parameters[j, c(1:5)]<-c(DataSub$participant[1],
alpha, beta, est$BIC, est$logLikel)
# retrieve the temp data
temp<-read.csv("output_files/estimated_parameters_RW_IC.csv")
# append the current results
temp<-rbind(temp, Parameters)
# sort them
temp<-temp[order(temp$PartNum ),]
# delete duplicate
temp<-temp %>% distinct()
# print
write.csv(temp,"output_files/estimated_parameters_RW_IC.csv", row.names = F)
# now the longdataset
temp_long<- read.csv( "output_files/RLdata_RW_IC.csv")
# write only  if there is not that participant in the dataset
if (j==1 | nrow(temp_long[temp_long$participant==DataSub$participant[j],])>1){ # print it
# attach the current
temp_long<- rbind(temp_long, Datalong)
# sort
temp_long<-temp_long[order(temp_long$participant ),]
write.csv(temp_long, "output_files/RLdata_RW_IC.csv", row.names = F)
}
#Parameters
setTxtProgressBar(pb, j)
}, error = function(e) { print(paste("problem with number", j,
"ERROR:", conditionMessage(e)))})
}
